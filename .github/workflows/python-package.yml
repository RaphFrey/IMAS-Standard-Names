name: CI/CD

on:
  push:
    branches:
      - main
      - develop
      - submit
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: "${{ github.workflow }}-${{ github.ref }}"
  cancel-in-progress: true

env:
  BASE_PYTHON_VERSION: "3.12"
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      is_base_python: ${{ matrix.python-version == env.BASE_PYTHON_VERSION }}
    strategy:
      fail-fast: true
      matrix:
        python-version: ["3.11", "3.12", "3.13"]

    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/install-project
        with:
          python-version: ${{ matrix.python-version }}

      - name: Ruff format check
        uses: astral-sh/ruff-action@v3
        with:
          args: "format --check"
          version: "latest"

      - name: Test and coverage
        run: |
          if [[ "${{ matrix.python-version }}" == "${{ env.BASE_PYTHON_VERSION }}" ]]; then
            poetry run pytest \
              --html=docs/reports/pytest/index.html \
              --self-contained-html \
              --cov \
              --cov-report=json \
              --cov-report=html:docs/reports/coverage \
              --cov-branch \
              --cov-report=xml \
              --junitxml=junit.xml -o junit_family=legacy
          else
            poetry run pytest
          fi

      - name: Upload test results to Codecov
        if: ${{ !cancelled() }}
        uses: codecov/test-results-action@v1

      - name: Upload coverage reports to Codecov
        if: matrix.python-version == env.BASE_PYTHON_VERSION
        uses: codecov/codecov-action@v5

      - name: Build branch documentation
        if: matrix.python-version == env.BASE_PYTHON_VERSION
        run: |
          git fetch origin gh-pages --depth=1
          git config user.name github-actions[bot]
          git config user.email github-actions[bot]@users.noreply.github.com
          poetry run mike deploy "${{ github.ref_name }}" --push --allow-empty

      # - name: Upload coverage json report for README coverage badge on main branch
      #   if: matrix.python-version == env.BASE_PYTHON_VERSION  && github.ref == format('refs/heads/{0}', github.event.repository.default_branch)
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: cov-json-${{ github.ref_name }}
      #     path: coverage.json
      #     retention-days: 1

      # - name: Upload coverage html report
      #   if: matrix.python-version == env.BASE_PYTHON_VERSION
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: cov-html-${{ github.ref_name }}
      #     path: htmlcov/
      #     retention-days: 1

      # - name: Upload pytest html report
      #   if: matrix.python-version == env.BASE_PYTHON_VERSION
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: pytest-html-${{ github.ref_name }}
      #     path: htmltest/
      #     retention-days: 1

  # coverage-badge:
  #   needs: test
  #   if: github.ref == format('refs/heads/{0}', github.event.repository.default_branch) && needs.build.outputs.is_base_python == 'true'
  #   runs-on: ubuntu-latest
  #   permissions:
  #     contents: write
  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: Download coverage json report
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: cov-json-${{ github.ref_name }}

  #     - name: Update Coverage Badge
  #       uses: we-cli/coverage-badge-action@main

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - uses: actions/checkout@v4
        with:
          ref: gh-pages

      - uses: actions/upload-pages-artifact@v3
        with:
          path: .
          retention-days: 1

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # deploy-docs:
  #   needs:
  #     - build
  #   if: needs.build.outputs.is_base_python == 'true'
  #   runs-on: ubuntu-latest
  #   permissions:
  #     pages: write
  #     id-token: write
  #   environment:
  #     name: github-pages
  #     url: ${{ steps.deploy-docs.outputs.page_url }}
  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #         ref: main

  #     - uses: ./.github/actions/install-project
  #       with:
  #         python-version: ${{ env.BASE_PYTHON_VERSION }}

  #     - name: Build docs
  #       run: poetry run mkdocs build -d ./site

  #     - name: Deploy to GitHub Pages
  #       id: deployment
  #       uses: actions/deploy-pages@v4

  #     # - id: deploy-docs
  #     #   uses: ./.github/actions/deploy-docs
  #     #   with:
  #     #     artifacts: >
  #     #       {
  #     #         "cov-html-${{ github.ref_name }}": "coverage",
  #     #         "pytest-html-${{ github.ref_name }}": "pytest"
  #     #       }
  #     #     token: ${{ secrets.GITHUB_TOKEN }}
  #     #     version: ${{ github.ref_name }}
  #     #     alias: ${{ github.ref_name == 'main' && 'latest' || '' }}
  #     #     update-aliases: "true"
